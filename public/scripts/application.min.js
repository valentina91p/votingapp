
(function(){
	'use strict';
	angular.module('VotingApp', [
        'ngRoute',
        'ngMessages',
        'ngCookies',
        'controllers',
        'services'
    ]).config(['$routeProvider', function($routeProvider){
    	$routeProvider.when('/',{
            templateUrl: './public/views/home.html'
        }).when('/login',{
    		templateUrl: './public/views/login.html',
            controller: 'LoginCtrl',
            controllerAs: 'ctrl'
    	}).when('/signup',{
            templateUrl: './public/views/signup.html',
            controller: 'SignUpCtrl',
            controllerAs: 'ctrl'
        }).when('/dashboard',{
            templateUrl: './public/views/dashboard.html',
            controller: 'DashboardCtrl',
            controllerAs: 'ctrl',
            access: { requiresLogin: true }
        }).when('/dashboard/poles/:id',{
    		templateUrl: './public/views/details.html',
            controller: 'PoleDetailsCtrl',
            controllerAs: 'ctrl',
            access: { requiresLogin: true }
    	}).when('/dashboard/new',{
            templateUrl: './public/views/new_pole.html',
            controller: 'NewPoleCtrl',
            controllerAs: 'ctrl',
            access: { requiresLogin: true }
        }).otherwise({redirectTo:'/'});
    }]).run(['$rootScope','$location','$session',
        function ($rootScope, $location, $session) {
            $rootScope.$on('$routeChangeStart', function (event, next) {
                if (next.access !== undefined) {
                    if(!$session.isLoggedIn()){
                        $location.path("/login");
                    }
                }
            });
        }]);
    angular.module('VotingApp').controller('MainCtrl', ['$session','$rootScope', '$location',
        function($session,$rootScope, $location){
            var self = this;
            self.current_user = $session.getUser();
            console.log(self.current_user);
            $rootScope.$on('login', function(event, args){
                console.log("On login");
                self.current_user = $session.getUser();
            });
            $rootScope.$on('logout', function(event,args){
                self.logout();
            });
            self.logout = function(){
                self.current_user = null;
                $session.logout();
                $location.url('/');
            };
        }]);
    angular.module('controllers',[]);
    angular.module('services',[]);
    angular.module('directives',[]);
    angular.module('filters',[]);
})();

angular.module('controllers')
	.controller('DashboardCtrl', ['PoleService',function(PoleService){
		var self = this;
		self.poles = [];
		self.selected = null;
		init();
		self.selectPole = function(pole){
			self.selected = pole;
		};
		self.deletePole = function(pole){
			if(!pole)
				return;
			PoleService.delete(pole).then(function(resp){
				for(var i = 0, len = self.poles.length; i < len; i++){
					if(self.poles[i]._id === pole._id){
						self.poles.splice(i,1);
						break;
					}
				}
			},function(resp){
				self.msg = resp.err;
			});
			self.selected = null;
		};
		self.togglePole = function(pole){
			pole.open = !pole.open;
			var data = {_id: pole._id, open: pole.open};
			PoleService.update(data).then(function(resp){
				
			},function(resp){
				self.msg = resp.err;
				pole.open = !pole.open;
			});

		};
		function init(){
			PoleService.find().then(function(resp){
				self.poles = resp.data.poles;
			},function(resp){});
		}



	}]);
angular.module('controllers')
	.controller('LoginCtrl', ['$scope','$session','$location','$rootScope', 
		function($scope, $session,$location){
			var self = this;
			self.credentials = {};
			self.feedback = false;

			self.login = function(credentials){
				$session.login(credentials).then(function(resp){
					$location.url("/dashboard");
				},function(error){
					self.feedback = error;
				});
			};
			self.loginTwitter = function(){};
			self.loginFacebook = function(){};
		}]);
angular.module('controllers')
	.controller('NewPoleCtrl', ['PoleService','$session','$location',
		 function(PoleService, $session, $location){
		var self = this;
		self.pole = {};
		self.pole.options = [];
		self.option = "";
		self.msg_error = false;
		self.editing = null;
		self.addOption = function($event, option){
			self.pole.options.push({text:option});
			self.option = "";
			$event.preventDefault();
			return false;
		};
		self.editOption = function($event, option){
			self.editing = option;
			var a = angular.element($event.currentTarget).next();
			angular.element(a[0]).focus();
		}
		self.createPole = function(pole){
			if(pole.options.length < 2){
				self.msg_error = "Must add at least two options";
			}

			PoleService.create(pole).then(function(resp){
				$location.url('/dashboard');
			},function(resp){
				if(resp.status > 399 && resp.status < 500){
					$session.logout();
					$location.url('/login');
				}

				self.msg_error = resp.data.err;
			});
		};
	}]);
angular.module('controllers')
	.controller('PoleDetailsCtrl',['PoleService','$routeParams','$location','$session',
		function(PoleService,$routeParams,$location,$session){
			var self = this;
			self.pole = null;
			init();
			function init(){
				var id = $routeParams.id;
				PoleService.findById(id).then(function(resp){
					if(!resp.data.pole.length)
						return;
					self.pole = resp.data.pole[0];
					if(self.pole._owner !== $session.getUser()._id)
						$location.url('/poles/'+id);
					self.pole.total_votes = self.pole.options.reduce(function(s,v){
						return s+v.votes;
					},0)
				},function(resp){

				});
			}
		}]);
angular.module('controllers')
	.controller('SignUpCtrl', ['$session','$flash','$location',
	 function($session,$flash,$location){
		var self = this;
		self.user = {};
		self.feedback = false;
		self.signup = function(user){
			console.log(user);
			$session.register(user).then(function(resp){
				$flash.setInfo('Welcome to VotingApp. Now log in');
				$location.url('/login');
			},function(resp){
				self.feedback = resp.data.err;
			});
		};
	}]);
angular.module('directives')
	.directive('noSubmit', function(){
		'use strict';
		return {

		};
	})
angular.module('services')
	.service('$flash', function(){
		var flash = {};
		var message = false;
		flash.retrieve = function(){
			if(!message)
				return false;
			var m = message;
			message = false;
			return m;
		};
		flash.hasFlash = function(){
			return message?true:false;
		}
		flash.setError = function(msg){
			message = {
				type:'ERROR',
				data:msg
			};
		};
		flash.setInfo = function(msg){
			message = {
				type:'INFO',
				data:msg
			};
		};flash.setWarning = function(msg){
			message = {
				type:'WARNING',
				data:msg
			};
		};flash.setSuccess = function(msg){
			message = {
				type:'SUCCESS',
				data:msg
			};
		};
		return flash;
	});
angular.module('services')
	.service('PoleService',['$http', function($http){
		var poles = {};
		poles.find = function(){
			return $http.get('/api/poles');
		};
		poles.findById = function(id){
			return $http.get('/api/poles/'+id);
		};
		poles.create = function(pole){
			return $http.post('/api/poles', pole);
		};

		poles.delete = function(pole){
			return $http.delete('/api/poles/'+pole._id);
		};
		poles.update = function(pole){
			var id = pole._id;
			delete pole._id;
			return $http.post('/api/poles/'+id, {pole:pole});	
		};
		return poles;
	}]);
angular.module('services')
	.service('$session', ['$http','$cookies','$q','$rootScope',
		function($http,$cookies,$q, $rootScope){
		var session = {};
		var user = undefined;
		session.login = function(credentials){
			return $q(function(resolve, reject){
				$http.post('/login',credentials).then(function(resp){
					user = resp.data.user;
					$cookies.putObject('u',user);
					$rootScope.$emit('login');
					resolve(true);
				},function(resp){
					reject(resp.data.err);
				});
			});
		}; 	
		session.getUser = function(){
			if(!user)
				user = $cookies.getObject('u');
			return user;
		};
		session.logout = function(){
			return $http.post('/logout')
				.then(function(resp){
					user = undefined;
					$cookies.remove('u');
					return true;
				});
		};
		session.register = function(user){
			return $http.post('/register', user);
		};
		session.isLoggedIn = function(){
			return this.getUser() !== undefined;
		};
		return session;
	}]);